import logging
import sys
import os
from dotenv import load_dotenv
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
import asyncio

class Form(StatesGroup):
    waiting_for_pair_name = State()
    waiting_for_number = State()
    waiting_for_weekday = State()
    waiting_for_week_type = State()
    waiting_for_description = State()
    waiting_for_link = State()  # –ù–æ–≤–∏–π —Å—Ç–∞–Ω –¥–ª—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
load_dotenv()
TOKEN = os.getenv("TOKEN")




# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –∫–Ω–æ–ø–∫–∞–º–∏ "–°–∫–∞—Å—É–≤–∞—Ç–∏" —Ç–∞ "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"
def get_cancel_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚èπ –°–∫–∞—Å—É–≤–∞—Ç–∏"), KeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –Ω–∞–∑–≤ –¥–Ω—ñ–≤ —Ç–∏–∂–Ω—è
WEEKDAYS = {
    "mon": "–ü–æ–Ω–µ–¥—ñ–ª–æ–∫",
    "tue": "–í—ñ–≤—Ç–æ—Ä–æ–∫",
    "wed": "–°–µ—Ä–µ–¥–∞",
    "thu": "–ß–µ—Ç–≤–µ—Ä",
    "fri": "–ü'—è—Ç–Ω–∏—Ü—è",
    "sat": "–°—É–±–æ—Ç–∞",
    "sun": "–ù–µ–¥—ñ–ª—è"
}


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–°—å–æ–≥–æ–¥–Ω—ñ")],
            [KeyboardButton(text="–ú—ñ–π —Ä–æ–∑–∫–ª–∞–¥")],
            [KeyboardButton(text="–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≥—Ä—É–ø–∞–º–∏")]
        ],
        resize_keyboard=True
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def start_handler(message: Message):
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=main_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—å–æ–≥–æ–¥–Ω—ñ"
@dp.message(F.text == "–°—å–æ–≥–æ–¥–Ω—ñ")
async def today_schedule(message: Message):
    inline_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="1.–û–ü–Ü", callback_data="–û–ü–Ü")],
            [InlineKeyboardButton(text="2.–§—ñ–∑–∏–∫–∞", callback_data="–§—ñ–∑–∏–∫–∞")]
        ]
    )
    await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –ø–∞—Ä—É", reply_markup=inline_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú—ñ–π —Ä–æ–∑–∫–ª–∞–¥"
@dp.message(F.text == "–ú—ñ–π —Ä–æ–∑–∫–ª–∞–¥")
async def my_schedule(message: Message):
    # Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–û–ü–Ü –∏ –§—ñ–∑–∏–∫–∞)
    inline_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="1.–û–ü–Ü", callback_data="–û–ü–Ü")],
            [InlineKeyboardButton(text="2.–§—ñ–∑–∏–∫–∞", callback_data="–§—ñ–∑–∏–∫–∞")]
        ]
    )

    # Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–°—Ç–≤–æ—Ä–∏—Ç–∏, –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥, –ì–æ–ª–æ–≤–Ω–µ)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–°—Ç–≤–æ—Ä–∏—Ç–∏")],
            [KeyboardButton(text="–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥")],
            [KeyboardButton(text="–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )
    await message.answer("–î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ–ø—Ü—ñ—ó:", reply_markup=keyboard)



@dp.message(F.text == "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥")
async def view_schedule(message: Message):
    # 1. Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º –ø–∞—Ä—ã
    inline_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="1.–û–ü–Ü : 9:00", callback_data="–û–ü–Ü")],
            [InlineKeyboardButton(text="2.–§—ñ–∑–∏–∫–∞: 10:20", callback_data="–§—ñ–∑–∏–∫–∞")]
        ]
    )
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –ø–∞—Ä—É:", reply_markup=inline_keyboard)

    # 2. Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–ø–æ—è–≤–∏—Ç—Å—è –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ü–∞—Ä–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å")],
            [KeyboardButton(text="–ù–µ–ø–∞—Ä–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å")],
            [KeyboardButton(text="–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )
    # –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –≤—ã–≤–æ–¥–∏—Ç—å –ª–∏—à–Ω–∏–π —Ç–µ–∫—Å—Ç
    await message.answer("–î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ–ø—Ü—ñ—ó", reply_markup=keyboard)



@dp.message(F.text == "–°—Ç–≤–æ—Ä–∏—Ç–∏")
async def create_pair(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –æ–Ω–ª–∞–π–Ω –ø–∞—Ä–∏:", reply_markup=get_cancel_menu())
    await state.set_state(Form.waiting_for_pair_name)


# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–∫–∞—Å—É–≤–∞—Ç–∏"
@dp.message(F.text == "‚èπ –°–∫–∞—Å—É–≤–∞—Ç–∏")
async def cancel_creation(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ä–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–æ", reply_markup=get_cancel_menu())


# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"
@dp.message(F.text == "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
async def main_menu(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", reply_markup=get_cancel_menu())


@dp.message(Form.waiting_for_pair_name)
async def process_pair_name(message: types.Message, state: FSMContext):
    await state.update_data(pair_name=message.text)

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=str(i), callback_data=str(i)) for i in range(1, 4)],
            [InlineKeyboardButton(text=str(i), callback_data=str(i)) for i in range(4, 7)],
            [InlineKeyboardButton(text=str(i), callback_data=str(i)) for i in range(7, 10)],
        ]
    )
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä –ø–∞—Ä–∏:", reply_markup=keyboard)
    await message.answer("–ê–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ:", reply_markup=get_cancel_menu())
    await state.set_state(Form.waiting_for_number)


@dp.callback_query(Form.waiting_for_number)
async def process_number(callback: types.CallbackQuery, state: FSMContext):
    if callback.data not in [str(i) for i in range(1, 10)]:
        await callback.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä –≤—ñ–¥ 1 –¥–æ 9")
        return

    await state.update_data(pair_number=callback.data)

    weekday_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–ü–Ω", callback_data="mon"),
                InlineKeyboardButton(text="–í—Ç", callback_data="tue"),
                InlineKeyboardButton(text="–°—Ä", callback_data="wed"),
            ],
            [
                InlineKeyboardButton(text="–ß—Ç", callback_data="thu"),
                InlineKeyboardButton(text="–ü—Ç", callback_data="fri"),
                InlineKeyboardButton(text="–°–±", callback_data="sat"),
            ],
            [
                InlineKeyboardButton(text="–ù–¥", callback_data="sun"),
            ]
        ]
    )

    await callback.message.edit_text(
        text=f"–û–±—Ä–∞–Ω–æ –ø–∞—Ä—É ‚Ññ{callback.data}. –û–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å —Ç–∏–∂–Ω—è:",
        reply_markup=weekday_kb
    )
    await callback.message.answer("–ê–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ:", reply_markup=get_cancel_menu())
    await state.set_state(Form.waiting_for_weekday)
    await callback.answer()


@dp.callback_query(Form.waiting_for_weekday)
async def process_weekday(callback: types.CallbackQuery, state: FSMContext):
    if callback.data not in WEEKDAYS:
        await callback.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å —Ç–∏–∂–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É")
        return

    await state.update_data(weekday=callback.data)

    week_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–ü–∞—Ä–Ω–∏–π", callback_data="even"),
                InlineKeyboardButton(text="–ù–µ–ø–∞—Ä–Ω–∏–π", callback_data="odd"),
                InlineKeyboardButton(text="–í—Å—ñ —Ç–∏–∂–Ω—ñ", callback_data="all")
            ]
        ]
    )

    await callback.message.edit_text(
        text=f"–û–±—Ä–∞–Ω–∏–π –¥–µ–Ω—å: {WEEKDAYS[callback.data]}. –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ç–∏–∂–Ω—è:",
        reply_markup=week_kb
    )
    await callback.message.answer("–ê–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ:", reply_markup=get_cancel_menu())
    await state.set_state(Form.waiting_for_week_type)
    await callback.answer()


@dp.callback_query(Form.waiting_for_week_type)
async def process_week_type(callback: types.CallbackQuery, state: FSMContext):
    if callback.data not in ["even", "odd", "all"]:
        await callback.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ç–∏–∂–Ω—è –∑ –ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–∏—Ö")
        return

    await state.update_data(week_type=callback.data)

    skip_button = InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", callback_data="skip_description")
    add_button = InlineKeyboardButton(text="–î–æ–¥–∞—Ç–∏ –æ–ø–∏—Å", callback_data="add_description")

    desc_kb = InlineKeyboardMarkup(inline_keyboard=[[skip_button, add_button]])

    await callback.message.edit_text(
        text="–ë–∞–∂–∞—î—Ç–µ –¥–æ–¥–∞—Ç–∏ –æ–ø–∏—Å –¥–æ –ø–∞—Ä–∏?",
        reply_markup=desc_kb
    )
    await callback.message.answer("–ê–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ:", reply_markup=get_cancel_menu())
    await state.set_state(Form.waiting_for_description)
    await callback.answer()


@dp.callback_query(Form.waiting_for_description, F.data == "skip_description")
async def skip_description(callback: types.CallbackQuery, state: FSMContext):
    # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –æ–ø–∏—Å —ñ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
    link_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", callback_data="skip_link"),
             InlineKeyboardButton(text="–î–æ–¥–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è", callback_data="add_link")]
        ]
    )
    await callback.message.edit_text(
        text="–ë–∞–∂–∞—î—Ç–µ –¥–æ–¥–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–æ –ø–∞—Ä–∏?",
        reply_markup=link_kb
    )
    await state.set_state(Form.waiting_for_link)
    await callback.answer()


@dp.callback_query(Form.waiting_for_description, F.data == "add_description")
async def ask_for_description(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        text="–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å –¥–ª—è —Ü—ñ—î—ó –ø–∞—Ä–∏:",
        reply_markup=None
    )
    await callback.message.answer("–ê–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ:", reply_markup=get_cancel_menu())
    await callback.answer()


@dp.message(Form.waiting_for_description)
async def process_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)

    link_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", callback_data="skip_link"),
             InlineKeyboardButton(text="–î–æ–¥–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è", callback_data="add_link")]
        ]
    )
    await message.answer("–ë–∞–∂–∞—î—Ç–µ –¥–æ–¥–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–æ –ø–∞—Ä–∏?", reply_markup=link_kb)
    await state.set_state(Form.waiting_for_link)


@dp.callback_query(Form.waiting_for_link, F.data == "skip_link")
async def skip_link(callback: types.CallbackQuery, state: FSMContext):
    await finish_pair_creation(callback, state, link=None)


@dp.callback_query(Form.waiting_for_link, F.data == "add_link")
async def ask_for_link(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        text="–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è —Ü—ñ—î—ó –ø–∞—Ä–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, https://meet.google.com/abc-def-ghi):",
        reply_markup=None
    )
    await callback.message.answer("–ê–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ:", reply_markup=get_cancel_menu())
    await callback.answer()


@dp.message(Form.waiting_for_link)
async def process_link(message: types.Message, state: FSMContext):
    await finish_pair_creation(message, state, link=message.text)


async def finish_pair_creation(source: types.Message | types.CallbackQuery, state: FSMContext, link: str | None):
    data = await state.get_data()

    week_types = {
        "even": "–ü–∞—Ä–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å",
        "odd": "–ù–µ–ø–∞—Ä–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å",
        "all": "–í—Å—ñ —Ç–∏–∂–Ω—ñ"
    }

    pair_data = {
        "name": data["pair_name"],
        "number": data["pair_number"],
        "weekday": WEEKDAYS[data["weekday"]],
        "week_type": week_types[data["week_type"]],
        "description": data.get("description"),
        "link": link
    }

    # –¢—É—Ç –º–æ–∂–Ω–∞ –∑–±–µ—Ä–µ–≥—Ç–∏ pair_data —É –±–∞–∑—É –¥–∞–Ω–∏—Ö
    print("–°—Ç–≤–æ—Ä–µ–Ω–∞ –ø–∞—Ä–∞:", pair_data)

    response_text = (
        f"‚úÖ –ü–∞—Ä–∞ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∞!\n\n"
        f"üìå –ù–∞–∑–≤–∞: {pair_data['name']}\n"
        f"üî¢ –ù–æ–º–µ—Ä: {pair_data['number']}\n"
        f"üìÖ –î–µ–Ω—å: {pair_data['weekday']}\n"
        f"üîÑ –¢–∏–ø —Ç–∏–∂–Ω—è: {pair_data['week_type']}\n"
    )

    if pair_data['description']:
        response_text += f"üìù –û–ø–∏—Å: {pair_data['description']}\n"
    else:
        response_text += "üìù –û–ø–∏—Å: –Ω–µ –¥–æ–¥–∞–Ω–æ\n"

    if pair_data['link']:
        response_text += f"üîó –ü–æ—Å–∏–ª–∞–Ω–Ω—è: {pair_data['link']}"
    else:
        response_text += "üîó –ü–æ—Å–∏–ª–∞–Ω–Ω—è: –Ω–µ –¥–æ–¥–∞–Ω–æ"

    if isinstance(source, types.Message):
        await source.answer(response_text, reply_markup=get_cancel_menu())
    else:
        await source.message.edit_text(response_text)
        await source.message.answer("–ì–æ—Ç–æ–≤–æ!", reply_markup=get_cancel_menu())

    await state.clear()
    if isinstance(source, types.CallbackQuery):
        await source.answer()





# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ì–æ–ª–æ–≤–Ω–µ"
@dp.message(F.text == "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
async def back_to_main_menu(message: Message):
    await message.answer("–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=main_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–æ–∫ (—Å—Å—ã–ª–∫–∏)
@dp.callback_query()
async def callback_handler(callback: CallbackQuery):
    if callback.data == "–û–ü–Ü":
        await callback.message.answer("https://meet.google.com/yhy-vjvx-dup?authuser=0")
    elif callback.data == "–§—ñ–∑–∏–∫–∞":
        await callback.message.answer("https://us05web.zoom.us/j/82766032885?pwd=Js0VEfywvF7931Cr7hrRys8Gr0EAaT.1")
    await callback.answer()


# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main() -> None:
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())


    # await callback.message.edit_text(
    #     f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞—Ä–∞:\n"
    #     f"–ù–∞–∑–≤–∞–Ω–∏–µ: {pair_name}\n"
    #     f"–ù–æ–º–µ—Ä: {selected_number}"
    #